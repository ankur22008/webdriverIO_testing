"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _util = _interopRequireDefault(require("util"));

var _ansiEscapes = _interopRequireDefault(require("ansi-escapes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CLInterface {
  constructor() {
    var _context;

    this.i = 0;
    this.stdoutBuffer = [];
    this.stderrBuffer = [];
    this.out = (_context = process.stdout).write.bind(_context);
    this.err = (_context = process.stderr).write.bind(_context);
    this.inDebugMode = false;
    this.clearAll();
    /**
     * don't modify stdout and stderr streams for unit tests
     */

    /* istanbul ignore if */

    if (!process.env.WDIO_TEST) {
      this.wrapStdio(process.stdout, this.stdoutBuffer);
      this.wrapStdio(process.stderr, this.stderrBuffer);
    }
  }

  wrapStdio(stream, buffer) {
    const out = stream.write.bind(stream);

    stream.write = chunk => {
      if (this.inDebugMode) {
        return out(chunk);
      }

      buffer.push(chunk);
      return true;
    };
  }

  clearBuffer() {
    for (let i = this.stdoutBuffer.length; i > 0; --i) {
      this.stdoutBuffer.pop();
    }

    for (let i = this.stderrBuffer.length; i > 0; --i) {
      this.stderrBuffer.pop();
    }
  }

  clearAll() {
    this.out(_ansiEscapes.default.clearScreen);
  }

  clearLine() {
    this.out(_ansiEscapes.default.eraseStartLine);
    this.out(_ansiEscapes.default.cursorLeft);
  }

  log(...messages) {
    this.out(_util.default.format.apply(this, messages) + '\n');
  }

  write(message) {
    this.out(message);
  }

  reset() {
    process.stdout.write = this.out;
    process.stderr.write = this.err;
  }

}

exports.default = CLInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJDTEludGVyZmFjZSIsImNvbnN0cnVjdG9yIiwiaSIsInN0ZG91dEJ1ZmZlciIsInN0ZGVyckJ1ZmZlciIsIm91dCIsInByb2Nlc3MiLCJzdGRvdXQiLCJ3cml0ZSIsImVyciIsInN0ZGVyciIsImluRGVidWdNb2RlIiwiY2xlYXJBbGwiLCJlbnYiLCJXRElPX1RFU1QiLCJ3cmFwU3RkaW8iLCJzdHJlYW0iLCJidWZmZXIiLCJjaHVuayIsInB1c2giLCJjbGVhckJ1ZmZlciIsImxlbmd0aCIsInBvcCIsImFuc2lFc2NhcGVzIiwiY2xlYXJTY3JlZW4iLCJjbGVhckxpbmUiLCJlcmFzZVN0YXJ0TGluZSIsImN1cnNvckxlZnQiLCJsb2ciLCJtZXNzYWdlcyIsInV0aWwiLCJmb3JtYXQiLCJhcHBseSIsIm1lc3NhZ2UiLCJyZXNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxXQUFOLENBQWtCO0FBQzdCQyxFQUFBQSxXQUFXLEdBQUk7QUFBQTs7QUFDWCxTQUFLQyxDQUFMLEdBQVMsQ0FBVDtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsRUFBcEI7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsU0FBS0MsR0FBTCxHQUFhLFlBQUFDLE9BQU8sQ0FBQ0MsTUFBUixFQUFlQyxLQUE1QjtBQUNBLFNBQUtDLEdBQUwsR0FBYSxZQUFBSCxPQUFPLENBQUNJLE1BQVIsRUFBZUYsS0FBNUI7QUFDQSxTQUFLRyxXQUFMLEdBQW1CLEtBQW5CO0FBRUEsU0FBS0MsUUFBTDtBQUVBOzs7O0FBR0E7O0FBQ0EsUUFBSSxDQUFDTixPQUFPLENBQUNPLEdBQVIsQ0FBWUMsU0FBakIsRUFBNEI7QUFDeEIsV0FBS0MsU0FBTCxDQUFlVCxPQUFPLENBQUNDLE1BQXZCLEVBQStCLEtBQUtKLFlBQXBDO0FBQ0EsV0FBS1ksU0FBTCxDQUFlVCxPQUFPLENBQUNJLE1BQXZCLEVBQStCLEtBQUtOLFlBQXBDO0FBQ0g7QUFDSjs7QUFFRFcsRUFBQUEsU0FBUyxDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBaUI7QUFDdEIsVUFBTVosR0FBRyxHQUFLVyxNQUFNLENBQUNSLEtBQVosTUFBS1EsTUFBTCxDQUFUOztBQUNBQSxJQUFBQSxNQUFNLENBQUNSLEtBQVAsR0FBZVUsS0FBSyxJQUFJO0FBQ3BCLFVBQUksS0FBS1AsV0FBVCxFQUFzQjtBQUNsQixlQUFPTixHQUFHLENBQUNhLEtBQUQsQ0FBVjtBQUNIOztBQUVERCxNQUFBQSxNQUFNLENBQUNFLElBQVAsQ0FBWUQsS0FBWjtBQUNBLGFBQU8sSUFBUDtBQUNILEtBUEQ7QUFRSDs7QUFFREUsRUFBQUEsV0FBVyxHQUFJO0FBQ1gsU0FBSyxJQUFJbEIsQ0FBQyxHQUFHLEtBQUtDLFlBQUwsQ0FBa0JrQixNQUEvQixFQUF1Q25CLENBQUMsR0FBRyxDQUEzQyxFQUE4QyxFQUFFQSxDQUFoRCxFQUFtRDtBQUMvQyxXQUFLQyxZQUFMLENBQWtCbUIsR0FBbEI7QUFDSDs7QUFDRCxTQUFLLElBQUlwQixDQUFDLEdBQUcsS0FBS0UsWUFBTCxDQUFrQmlCLE1BQS9CLEVBQXVDbkIsQ0FBQyxHQUFHLENBQTNDLEVBQThDLEVBQUVBLENBQWhELEVBQW1EO0FBQy9DLFdBQUtFLFlBQUwsQ0FBa0JrQixHQUFsQjtBQUNIO0FBQ0o7O0FBRURWLEVBQUFBLFFBQVEsR0FBSTtBQUNSLFNBQUtQLEdBQUwsQ0FBU2tCLHFCQUFZQyxXQUFyQjtBQUNIOztBQUVEQyxFQUFBQSxTQUFTLEdBQUk7QUFDVCxTQUFLcEIsR0FBTCxDQUFTa0IscUJBQVlHLGNBQXJCO0FBQ0EsU0FBS3JCLEdBQUwsQ0FBU2tCLHFCQUFZSSxVQUFyQjtBQUNIOztBQUVEQyxFQUFBQSxHQUFHLENBQUMsR0FBR0MsUUFBSixFQUFjO0FBQ2IsU0FBS3hCLEdBQUwsQ0FBU3lCLGNBQUtDLE1BQUwsQ0FBWUMsS0FBWixDQUFrQixJQUFsQixFQUF3QkgsUUFBeEIsSUFBb0MsSUFBN0M7QUFDSDs7QUFFRHJCLEVBQUFBLEtBQUssQ0FBRXlCLE9BQUYsRUFBVztBQUNaLFNBQUs1QixHQUFMLENBQVM0QixPQUFUO0FBQ0g7O0FBRURDLEVBQUFBLEtBQUssR0FBSTtBQUNMNUIsSUFBQUEsT0FBTyxDQUFDQyxNQUFSLENBQWVDLEtBQWYsR0FBdUIsS0FBS0gsR0FBNUI7QUFDQUMsSUFBQUEsT0FBTyxDQUFDSSxNQUFSLENBQWVGLEtBQWYsR0FBdUIsS0FBS0MsR0FBNUI7QUFDSDs7QUE5RDRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHV0aWwgZnJvbSAndXRpbCdcbmltcG9ydCBhbnNpRXNjYXBlcyBmcm9tICdhbnNpLWVzY2FwZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENMSW50ZXJmYWNlIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuaSA9IDBcbiAgICAgICAgdGhpcy5zdGRvdXRCdWZmZXIgPSBbXVxuICAgICAgICB0aGlzLnN0ZGVyckJ1ZmZlciA9IFtdXG4gICAgICAgIHRoaXMub3V0ID0gOjpwcm9jZXNzLnN0ZG91dC53cml0ZVxuICAgICAgICB0aGlzLmVyciA9IDo6cHJvY2Vzcy5zdGRlcnIud3JpdGVcbiAgICAgICAgdGhpcy5pbkRlYnVnTW9kZSA9IGZhbHNlXG5cbiAgICAgICAgdGhpcy5jbGVhckFsbCgpXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRvbid0IG1vZGlmeSBzdGRvdXQgYW5kIHN0ZGVyciBzdHJlYW1zIGZvciB1bml0IHRlc3RzXG4gICAgICAgICAqL1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5XRElPX1RFU1QpIHtcbiAgICAgICAgICAgIHRoaXMud3JhcFN0ZGlvKHByb2Nlc3Muc3Rkb3V0LCB0aGlzLnN0ZG91dEJ1ZmZlcilcbiAgICAgICAgICAgIHRoaXMud3JhcFN0ZGlvKHByb2Nlc3Muc3RkZXJyLCB0aGlzLnN0ZGVyckJ1ZmZlcilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHdyYXBTdGRpbyhzdHJlYW0sIGJ1ZmZlcikge1xuICAgICAgICBjb25zdCBvdXQgPSA6OnN0cmVhbS53cml0ZVxuICAgICAgICBzdHJlYW0ud3JpdGUgPSBjaHVuayA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbkRlYnVnTW9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdXQoY2h1bmspXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJ1ZmZlci5wdXNoKGNodW5rKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyQnVmZmVyICgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3Rkb3V0QnVmZmVyLmxlbmd0aDsgaSA+IDA7IC0taSkge1xuICAgICAgICAgICAgdGhpcy5zdGRvdXRCdWZmZXIucG9wKClcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGRlcnJCdWZmZXIubGVuZ3RoOyBpID4gMDsgLS1pKSB7XG4gICAgICAgICAgICB0aGlzLnN0ZGVyckJ1ZmZlci5wb3AoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXJBbGwgKCkge1xuICAgICAgICB0aGlzLm91dChhbnNpRXNjYXBlcy5jbGVhclNjcmVlbilcbiAgICB9XG5cbiAgICBjbGVhckxpbmUgKCkge1xuICAgICAgICB0aGlzLm91dChhbnNpRXNjYXBlcy5lcmFzZVN0YXJ0TGluZSlcbiAgICAgICAgdGhpcy5vdXQoYW5zaUVzY2FwZXMuY3Vyc29yTGVmdClcbiAgICB9XG5cbiAgICBsb2coLi4ubWVzc2FnZXMpIHtcbiAgICAgICAgdGhpcy5vdXQodXRpbC5mb3JtYXQuYXBwbHkodGhpcywgbWVzc2FnZXMpICsgJ1xcbicpXG4gICAgfVxuXG4gICAgd3JpdGUgKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5vdXQobWVzc2FnZSlcbiAgICB9XG5cbiAgICByZXNldCAoKSB7XG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlID0gdGhpcy5vdXRcbiAgICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUgPSB0aGlzLmVyclxuICAgIH1cbn1cbiJdfQ==