"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runHook = runHook;
exports.initialiseServices = initialiseServices;
exports.sanitizeCaps = sanitizeCaps;
exports.initialiseInstance = initialiseInstance;

require("source-map-support/register");

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _webdriverio = require("webdriverio");

var _config = require("@wdio/config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const log = (0, _logger.default)('wdio-local-runner:utils');
const MERGE_OPTIONS = {
  clone: false
  /**
   * run before/after session hook
   */

};

function runHook(hookName, config, caps, specs) {
  const catchFn = e => log.error(`Error in ${hookName}: ${e.stack}`);

  return Promise.all(config[hookName].map(hook => {
    try {
      return hook(config, caps, specs);
    } catch (e) {
      return catchFn(e);
    }
  })).catch(catchFn);
}
/**
 * initialise services based on configuration
 * @param  {Object}    config  of running session
 * @return {Object[]}          list of service classes that got initialised
 */


function initialiseServices(config, caps) {
  const initialisedServices = [];

  if (!Array.isArray(config.services)) {
    return initialisedServices;
  }

  for (let serviceName of config.services) {
    /**
     * allow custom services that are already initialised
     */
    if (typeof serviceName === 'object') {
      log.debug(`initialise custom service "${serviceName}"`);
      initialisedServices.push(serviceName);
      continue;
    }

    log.debug(`initialise wdio service "${serviceName}"`);

    try {
      const Service = (0, _config.initialisePlugin)(serviceName, 'service');
      initialisedServices.push(new Service(config, caps));
    } catch (e) {
      log.error(e);
    }
  }

  return initialisedServices;
}
/**
 * sanitizes wdio config from capability properties
 * @param  {Object} caps  desired session capabilities
 * @return {Object}       sanitized caps
 */


function sanitizeCaps(caps) {
  return Object.keys(caps).filter(key =>
  /**
   * filter out all wdio config keys
   */
  !Object.keys(_config.DEFAULT_CONFIGS).includes(key)).reduce((obj, key) => {
    obj[key] = caps[key];
    return obj;
  }, {});
}
/**
 * initialise browser instance depending whether remote or multiremote is requested
 */


async function initialiseInstance(config, capabilities, isMultiremote) {
  /**
   * check if config has sessionId and attach it to a running session if so
   */
  if (config.sessionId) {
    log.debug(`attach to session with id ${config.sessionId}`);
    return (0, _webdriverio.attach)(_objectSpread({}, config, {
      capabilities: capabilities
    }));
  }

  if (!isMultiremote) {
    log.debug('init remote session');
    config.capabilities = sanitizeCaps(capabilities);
    return (0, _webdriverio.remote)(config);
  }

  const options = {};
  log.debug('init multiremote session');

  for (let browserName of Object.keys(capabilities)) {
    options[browserName] = (0, _deepmerge.default)(config, capabilities[browserName], MERGE_OPTIONS);
  }

  const browser = await (0, _webdriverio.multiremote)(options);

  for (let browserName of Object.keys(capabilities)) {
    global[browserName] = browser[browserName];
  }

  return browser;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,