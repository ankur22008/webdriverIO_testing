"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _reporter = _interopRequireDefault(require("@wdio/reporter"));

var _allureJsCommons = _interopRequireDefault(require("allure-js-commons"));

var _step = _interopRequireDefault(require("allure-js-commons/beans/step"));

var _utils = require("./utils");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AllureReporter extends _reporter.default {
  constructor(options) {
    super(options);
    this.config = {};
    this.allure = new _allureJsCommons.default();
    this.allure.setOptions({
      targetDir: options.outputDir || 'allure-results'
    });
    this.registerListeners();
  }

  registerListeners() {
    process.on(_constants.events.addFeature, this.addFeature.bind(this));
    process.on(_constants.events.addStory, this.addStory.bind(this));
    process.on(_constants.events.addSeverity, this.addSeverity.bind(this));
    process.on(_constants.events.addIssue, this.addIssue.bind(this));
    process.on(_constants.events.addTestId, this.addTestId.bind(this));
    process.on(_constants.events.addEnvironment, this.addEnvironment.bind(this));
    process.on(_constants.events.addAttachment, this.addAttachment.bind(this));
    process.on(_constants.events.addDescription, this.addDescription.bind(this));
    process.on(_constants.events.addStep, this.addStep.bind(this));
    process.on(_constants.events.addArgument, this.addArgument.bind(this));
  }

  onRunnerStart(runner) {
    this.config = runner.config;
    this.isMultiremote = runner.isMultiremote || false;
  }

  onSuiteStart(suite) {
    const currentSuite = this.allure.getCurrentSuite();
    const prefix = currentSuite ? currentSuite.name + ' ' : '';
    this.allure.startSuite(prefix + suite.title);
  }

  onSuiteEnd() {
    this.allure.endSuite();
  }

  onTestStart(test) {
    this.allure.startCase(test.title);
    const currentTest = this.allure.getCurrentTest();
    const {
      browserName,
      deviceName
    } = this.config.capabilities;
    const targetName = browserName || deviceName || test.cid;
    const version = this.config.capabilities.version || this.config.capabilities.platformVersion || '';
    const paramName = deviceName ? 'device' : 'browser';
    const paramValue = version ? `${targetName}-${version}` : targetName;
    currentTest.addParameter('argument', paramName, paramValue); // Allure analytics labels. See https://github.com/allure-framework/allure2/blob/master/Analytics.md

    currentTest.addLabel('language', 'javascript');
    currentTest.addLabel('framework', 'wdio');
    currentTest.addLabel('thread', test.cid);
  }

  onTestPass() {
    this.allure.endCase(_constants.testStatuses.PASSED);
  }

  onTestFail(test) {
    if (!this.isAnyTestRunning()) {
      this.allure.startCase(test.title);
    } else {
      this.allure.getCurrentTest().name = test.title;
    }

    const status = (0, _utils.getTestStatus)(test, this.config);

    while (this.allure.getCurrentSuite().currentStep instanceof _step.default) {
      this.allure.endStep(status);
    }

    this.allure.endCase(status, test.error);
  }

  onTestSkip(test) {
    if (this.allure.getCurrentTest() && this.allure.getCurrentTest().status !== _constants.testStatuses.PENDING) {
      this.allure.endCase(_constants.testStatuses.PENDING);
    } else {
      this.allure.pendingCase(test.title);
    }
  }

  onBeforeCommand(command) {
    if (!this.isAnyTestRunning()) {
      return;
    }

    if (this.options.disableWebdriverStepsReporting || this.isMultiremote) {
      return;
    }

    this.allure.startStep(`${command.method} ${command.endpoint}`);

    if (!(0, _utils.isEmpty)(command.body)) {
      this.dumpJSON('Request', command.body);
    }
  }

  onAfterCommand(command) {
    if (!this.isAnyTestRunning() || this.isMultiremote) {
      return;
    }

    const {
      disableWebdriverStepsReporting,
      disableWebdriverScreenshotsReporting
    } = this.options;

    if (this.isScreenshotCommand(command) && command.result.value) {
      if (!disableWebdriverScreenshotsReporting) {
        this.allure.addAttachment('Screenshot', Buffer.from(command.result.value, 'base64'));
      }
    }

    if (!disableWebdriverStepsReporting) {
      if (command.result && command.result.value && !this.isScreenshotCommand(command)) {
        this.dumpJSON('Response', command.result.value);
      }

      this.allure.endStep(_constants.testStatuses.PASSED);
    }
  }

  onHookStart(hook) {
    if (!this.allure.getCurrentSuite() || (0, _utils.ignoredHooks)(hook.title)) {
      return false;
    }

    this.allure.startCase(hook.title);
  }

  onHookEnd(hook) {
    if (!this.allure.getCurrentSuite() || (0, _utils.ignoredHooks)(hook.title)) {
      return false;
    }

    this.allure.endCase(_constants.testStatuses.PASSED);

    if (this.allure.getCurrentTest().steps.length === 0) {
      this.allure.getCurrentSuite().testcases.pop();
    }
  }

  addStory({
    storyName
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('story', storyName);
  }

  addFeature({
    featureName
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('feature', featureName);
  }

  addSeverity({
    severity
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('severity', severity);
  }

  addIssue({
    issue
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('issue', issue);
  }

  addTestId({
    testId
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addLabel('testId', testId);
  }

  addEnvironment({
    name,
    value
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addParameter('environment-variable', name, value);
  }

  addDescription({
    description,
    type
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.setDescription(description, type);
  }

  addAttachment({
    name,
    content,
    type = 'text/plain'
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    if (type === 'application/json') {
      this.dumpJSON(name, content);
    } else {
      this.allure.addAttachment(name, Buffer.from(content), type);
    }
  }

  addStep({
    step
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    this.allure.startStep(step.title);

    if (step.attachment) {
      this.addAttachment(step.attachment);
    }

    this.allure.endStep(step.status);
  }

  addArgument({
    name,
    value
  }) {
    if (!this.isAnyTestRunning()) {
      return false;
    }

    const test = this.allure.getCurrentTest();
    test.addParameter('argument', name, value);
  }

  isAnyTestRunning() {
    return this.allure.getCurrentSuite() && this.allure.getCurrentTest();
  }

  isScreenshotCommand(command) {
    const isScrenshotEndpoint = /\/session\/[^/]*\/screenshot/;
    return isScrenshotEndpoint.test(command.endpoint);
  }

  dumpJSON(name, json) {
    this.allure.addAttachment(name, JSON.stringify(json, null, 2), 'application/json');
  }
  /**
   * Assign feature to test
   * @param {(string)} featureName - feature name or an array of names
   */


}

_defineProperty(AllureReporter, "addFeature", featureName => {
  (0, _utils.tellReporter)(_constants.events.addFeature, {
    featureName
  });
});

_defineProperty(AllureReporter, "addSeverity", severity => {
  (0, _utils.tellReporter)(_constants.events.addSeverity, {
    severity
  });
});

_defineProperty(AllureReporter, "addIssue", issue => {
  (0, _utils.tellReporter)(_constants.events.addIssue, {
    issue
  });
});

_defineProperty(AllureReporter, "addTestId", testId => {
  (0, _utils.tellReporter)(_constants.events.addTestId, {
    testId
  });
});

_defineProperty(AllureReporter, "addStory", storyName => {
  (0, _utils.tellReporter)(_constants.events.addStory, {
    storyName
  });
});

_defineProperty(AllureReporter, "addEnvironment", (name, value) => {
  (0, _utils.tellReporter)(_constants.events.addEnvironment, {
    name,
    value
  });
});

_defineProperty(AllureReporter, "addDescription", (description, type) => {
  (0, _utils.tellReporter)(_constants.events.addDescription, {
    description,
    type
  });
});

_defineProperty(AllureReporter, "addAttachment", (name, content, type = 'text/plain') => {
  (0, _utils.tellReporter)(_constants.events.addAttachment, {
    name,
    content,
    type
  });
});

_defineProperty(AllureReporter, "addStep", (title, {
  content,
  name = 'attachment'
}, status = _constants.stepStatuses.PASSED) => {
  if (!Object.values(_constants.stepStatuses).includes(status)) {
    throw new Error(`Step status must be ${Object.values(_constants.stepStatuses).join(' or ')}. You tried to set "${status}"`);
  }

  const step = {
    title,
    attachment: {
      content,
      name
    },
    status
  };
  (0, _utils.tellReporter)(_constants.events.addStep, {
    step
  });
});

_defineProperty(AllureReporter, "addArgument", (name, value) => {
  (0, _utils.tellReporter)(_constants.events.addArgument, {
    name,
    value
  });
});

var _default = AllureReporter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,