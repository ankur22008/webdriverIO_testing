"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = run;

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _launcher = _interopRequireDefault(require("./launcher.js"));

var _watcher = _interopRequireDefault(require("./watcher"));

var _setup = _interopRequireDefault(require("./setup"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-cli:run');

function run(params) {
  let stdinData = '';
  const firstArgument = params._[0];

  const commands = _fs.default.readdirSync(_path.default.join(__dirname, 'commands')).map(file => _path.default.parse(file).name);

  const localConf = _path.default.join(process.cwd(), 'wdio.conf.js');

  const wdioConf = firstArgument || (_fs.default.existsSync(localConf) ? localConf : null);
  /**
   * don't do anything if command handler is triggered
   */

  if (commands.includes(firstArgument)) {
    return;
  }
  /**
   * if no default wdio.conf was found and no path to a wdio config was specified
   * run the setup
   */


  if (!wdioConf || firstArgument === 'config') {
    return (0, _setup.default)();
  }
  /**
   * if `--watch` param is set, run launcher in watch mode
   */


  if (params.watch) {
    const watcher = new _watcher.default(wdioConf, params);
    return watcher.watch();
  }
  /**
   * if stdin.isTTY, then no piped input is present and launcher should be
   * called immediately, otherwise piped input is processed, expecting
   * a list of files to process.
   *
   * stdin.isTTY is false when command is from nodes spawn since it's treated as a pipe
   */


  if (process.stdin.isTTY || !process.stdout.isTTY) {
    return launch(wdioConf, params);
  }
  /*
   * get a list of spec files to run from stdin, overriding any other
   * configuration suite or specs.
   */


  const stdin = process.openStdin();
  stdin.setEncoding('utf8');
  stdin.on('data', data => {
    stdinData += data;
  });
  stdin.on('end', () => {
    if (stdinData.length > 0) {
      params.specs = stdinData.trim().split(/\r?\n/);
    }

    launch(wdioConf, params);
  });
}

function launch(wdioConf, params) {
  log.debug('Run suite with config', wdioConf, 'and params', params);
  const launcher = new _launcher.default(wdioConf, params);
  launcher.run().then(code => process.exit(code), e => process.nextTick(() => {
    throw e;
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydW4uanMiXSwibmFtZXMiOlsibG9nIiwicnVuIiwicGFyYW1zIiwic3RkaW5EYXRhIiwiZmlyc3RBcmd1bWVudCIsIl8iLCJjb21tYW5kcyIsImZzIiwicmVhZGRpclN5bmMiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsIm1hcCIsImZpbGUiLCJwYXJzZSIsIm5hbWUiLCJsb2NhbENvbmYiLCJwcm9jZXNzIiwiY3dkIiwid2Rpb0NvbmYiLCJleGlzdHNTeW5jIiwiaW5jbHVkZXMiLCJ3YXRjaCIsIndhdGNoZXIiLCJXYXRjaGVyIiwic3RkaW4iLCJpc1RUWSIsInN0ZG91dCIsImxhdW5jaCIsIm9wZW5TdGRpbiIsInNldEVuY29kaW5nIiwib24iLCJkYXRhIiwibGVuZ3RoIiwic3BlY3MiLCJ0cmltIiwic3BsaXQiLCJkZWJ1ZyIsImxhdW5jaGVyIiwiTGF1bmNoZXIiLCJ0aGVuIiwiY29kZSIsImV4aXQiLCJlIiwibmV4dFRpY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHLHFCQUFPLGNBQVAsQ0FBWjs7QUFFZSxTQUFTQyxHQUFULENBQWNDLE1BQWQsRUFBc0I7QUFDakMsTUFBSUMsU0FBUyxHQUFHLEVBQWhCO0FBRUEsUUFBTUMsYUFBYSxHQUFHRixNQUFNLENBQUNHLENBQVAsQ0FBUyxDQUFULENBQXRCOztBQUNBLFFBQU1DLFFBQVEsR0FBR0MsWUFBR0MsV0FBSCxDQUFlQyxjQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsVUFBckIsQ0FBZixFQUFpREMsR0FBakQsQ0FBc0RDLElBQUQsSUFBVUosY0FBS0ssS0FBTCxDQUFXRCxJQUFYLEVBQWlCRSxJQUFoRixDQUFqQjs7QUFDQSxRQUFNQyxTQUFTLEdBQUdQLGNBQUtDLElBQUwsQ0FBVU8sT0FBTyxDQUFDQyxHQUFSLEVBQVYsRUFBeUIsY0FBekIsQ0FBbEI7O0FBQ0EsUUFBTUMsUUFBUSxHQUFHZixhQUFhLEtBQUtHLFlBQUdhLFVBQUgsQ0FBY0osU0FBZCxJQUEyQkEsU0FBM0IsR0FBdUMsSUFBNUMsQ0FBOUI7QUFFQTs7OztBQUdBLE1BQUlWLFFBQVEsQ0FBQ2UsUUFBVCxDQUFrQmpCLGFBQWxCLENBQUosRUFBc0M7QUFDbEM7QUFDSDtBQUVEOzs7Ozs7QUFJQSxNQUFJLENBQUNlLFFBQUQsSUFBYWYsYUFBYSxLQUFLLFFBQW5DLEVBQTZDO0FBQ3pDLFdBQU8scUJBQVA7QUFDSDtBQUVEOzs7OztBQUdBLE1BQUlGLE1BQU0sQ0FBQ29CLEtBQVgsRUFBa0I7QUFDZCxVQUFNQyxPQUFPLEdBQUcsSUFBSUMsZ0JBQUosQ0FBWUwsUUFBWixFQUFzQmpCLE1BQXRCLENBQWhCO0FBQ0EsV0FBT3FCLE9BQU8sQ0FBQ0QsS0FBUixFQUFQO0FBQ0g7QUFFRDs7Ozs7Ozs7O0FBT0EsTUFBSUwsT0FBTyxDQUFDUSxLQUFSLENBQWNDLEtBQWQsSUFBdUIsQ0FBQ1QsT0FBTyxDQUFDVSxNQUFSLENBQWVELEtBQTNDLEVBQWtEO0FBQzlDLFdBQU9FLE1BQU0sQ0FBQ1QsUUFBRCxFQUFXakIsTUFBWCxDQUFiO0FBQ0g7QUFFRDs7Ozs7O0FBSUEsUUFBTXVCLEtBQUssR0FBR1IsT0FBTyxDQUFDWSxTQUFSLEVBQWQ7QUFDQUosRUFBQUEsS0FBSyxDQUFDSyxXQUFOLENBQWtCLE1BQWxCO0FBQ0FMLEVBQUFBLEtBQUssQ0FBQ00sRUFBTixDQUFTLE1BQVQsRUFBa0JDLElBQUQsSUFBVTtBQUN2QjdCLElBQUFBLFNBQVMsSUFBSTZCLElBQWI7QUFDSCxHQUZEO0FBR0FQLEVBQUFBLEtBQUssQ0FBQ00sRUFBTixDQUFTLEtBQVQsRUFBZ0IsTUFBTTtBQUNsQixRQUFJNUIsU0FBUyxDQUFDOEIsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN0Qi9CLE1BQUFBLE1BQU0sQ0FBQ2dDLEtBQVAsR0FBZS9CLFNBQVMsQ0FBQ2dDLElBQVYsR0FBaUJDLEtBQWpCLENBQXVCLE9BQXZCLENBQWY7QUFDSDs7QUFDRFIsSUFBQUEsTUFBTSxDQUFDVCxRQUFELEVBQVdqQixNQUFYLENBQU47QUFDSCxHQUxEO0FBTUg7O0FBRUQsU0FBUzBCLE1BQVQsQ0FBaUJULFFBQWpCLEVBQTJCakIsTUFBM0IsRUFBbUM7QUFDL0JGLEVBQUFBLEdBQUcsQ0FBQ3FDLEtBQUosQ0FBVSx1QkFBVixFQUFtQ2xCLFFBQW5DLEVBQTZDLFlBQTdDLEVBQTJEakIsTUFBM0Q7QUFDQSxRQUFNb0MsUUFBUSxHQUFHLElBQUlDLGlCQUFKLENBQWFwQixRQUFiLEVBQXVCakIsTUFBdkIsQ0FBakI7QUFDQW9DLEVBQUFBLFFBQVEsQ0FBQ3JDLEdBQVQsR0FBZXVDLElBQWYsQ0FDS0MsSUFBRCxJQUFVeEIsT0FBTyxDQUFDeUIsSUFBUixDQUFhRCxJQUFiLENBRGQsRUFFS0UsQ0FBRCxJQUFPMUIsT0FBTyxDQUFDMkIsUUFBUixDQUFpQixNQUFNO0FBQUUsVUFBTUQsQ0FBTjtBQUFTLEdBQWxDLENBRlg7QUFHSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcblxuaW1wb3J0IExhdW5jaGVyIGZyb20gJy4vbGF1bmNoZXIuanMnXG5pbXBvcnQgV2F0Y2hlciBmcm9tICcuL3dhdGNoZXInXG5pbXBvcnQgc2V0dXAgZnJvbSAnLi9zZXR1cCdcblxuY29uc3QgbG9nID0gbG9nZ2VyKCd3ZGlvLWNsaTpydW4nKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBydW4gKHBhcmFtcykge1xuICAgIGxldCBzdGRpbkRhdGEgPSAnJ1xuXG4gICAgY29uc3QgZmlyc3RBcmd1bWVudCA9IHBhcmFtcy5fWzBdXG4gICAgY29uc3QgY29tbWFuZHMgPSBmcy5yZWFkZGlyU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnY29tbWFuZHMnKSkubWFwKChmaWxlKSA9PiBwYXRoLnBhcnNlKGZpbGUpLm5hbWUpXG4gICAgY29uc3QgbG9jYWxDb25mID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd3ZGlvLmNvbmYuanMnKVxuICAgIGNvbnN0IHdkaW9Db25mID0gZmlyc3RBcmd1bWVudCB8fCAoZnMuZXhpc3RzU3luYyhsb2NhbENvbmYpID8gbG9jYWxDb25mIDogbnVsbClcblxuICAgIC8qKlxuICAgICAqIGRvbid0IGRvIGFueXRoaW5nIGlmIGNvbW1hbmQgaGFuZGxlciBpcyB0cmlnZ2VyZWRcbiAgICAgKi9cbiAgICBpZiAoY29tbWFuZHMuaW5jbHVkZXMoZmlyc3RBcmd1bWVudCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaWYgbm8gZGVmYXVsdCB3ZGlvLmNvbmYgd2FzIGZvdW5kIGFuZCBubyBwYXRoIHRvIGEgd2RpbyBjb25maWcgd2FzIHNwZWNpZmllZFxuICAgICAqIHJ1biB0aGUgc2V0dXBcbiAgICAgKi9cbiAgICBpZiAoIXdkaW9Db25mIHx8IGZpcnN0QXJndW1lbnQgPT09ICdjb25maWcnKSB7XG4gICAgICAgIHJldHVybiBzZXR1cCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaWYgYC0td2F0Y2hgIHBhcmFtIGlzIHNldCwgcnVuIGxhdW5jaGVyIGluIHdhdGNoIG1vZGVcbiAgICAgKi9cbiAgICBpZiAocGFyYW1zLndhdGNoKSB7XG4gICAgICAgIGNvbnN0IHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih3ZGlvQ29uZiwgcGFyYW1zKVxuICAgICAgICByZXR1cm4gd2F0Y2hlci53YXRjaCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaWYgc3RkaW4uaXNUVFksIHRoZW4gbm8gcGlwZWQgaW5wdXQgaXMgcHJlc2VudCBhbmQgbGF1bmNoZXIgc2hvdWxkIGJlXG4gICAgICogY2FsbGVkIGltbWVkaWF0ZWx5LCBvdGhlcndpc2UgcGlwZWQgaW5wdXQgaXMgcHJvY2Vzc2VkLCBleHBlY3RpbmdcbiAgICAgKiBhIGxpc3Qgb2YgZmlsZXMgdG8gcHJvY2Vzcy5cbiAgICAgKlxuICAgICAqIHN0ZGluLmlzVFRZIGlzIGZhbHNlIHdoZW4gY29tbWFuZCBpcyBmcm9tIG5vZGVzIHNwYXduIHNpbmNlIGl0J3MgdHJlYXRlZCBhcyBhIHBpcGVcbiAgICAgKi9cbiAgICBpZiAocHJvY2Vzcy5zdGRpbi5pc1RUWSB8fCAhcHJvY2Vzcy5zdGRvdXQuaXNUVFkpIHtcbiAgICAgICAgcmV0dXJuIGxhdW5jaCh3ZGlvQ29uZiwgcGFyYW1zKVxuICAgIH1cblxuICAgIC8qXG4gICAgICogZ2V0IGEgbGlzdCBvZiBzcGVjIGZpbGVzIHRvIHJ1biBmcm9tIHN0ZGluLCBvdmVycmlkaW5nIGFueSBvdGhlclxuICAgICAqIGNvbmZpZ3VyYXRpb24gc3VpdGUgb3Igc3BlY3MuXG4gICAgICovXG4gICAgY29uc3Qgc3RkaW4gPSBwcm9jZXNzLm9wZW5TdGRpbigpXG4gICAgc3RkaW4uc2V0RW5jb2RpbmcoJ3V0ZjgnKVxuICAgIHN0ZGluLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgICAgc3RkaW5EYXRhICs9IGRhdGFcbiAgICB9KVxuICAgIHN0ZGluLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgIGlmIChzdGRpbkRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcGFyYW1zLnNwZWNzID0gc3RkaW5EYXRhLnRyaW0oKS5zcGxpdCgvXFxyP1xcbi8pXG4gICAgICAgIH1cbiAgICAgICAgbGF1bmNoKHdkaW9Db25mLCBwYXJhbXMpXG4gICAgfSlcbn1cblxuZnVuY3Rpb24gbGF1bmNoICh3ZGlvQ29uZiwgcGFyYW1zKSB7XG4gICAgbG9nLmRlYnVnKCdSdW4gc3VpdGUgd2l0aCBjb25maWcnLCB3ZGlvQ29uZiwgJ2FuZCBwYXJhbXMnLCBwYXJhbXMpXG4gICAgY29uc3QgbGF1bmNoZXIgPSBuZXcgTGF1bmNoZXIod2Rpb0NvbmYsIHBhcmFtcylcbiAgICBsYXVuY2hlci5ydW4oKS50aGVuKFxuICAgICAgICAoY29kZSkgPT4gcHJvY2Vzcy5leGl0KGNvZGUpLFxuICAgICAgICAoZSkgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7IHRocm93IGUgfSkpXG59XG4iXX0=