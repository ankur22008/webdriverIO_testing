"use strict";

require("source-map-support/register");

var _asyncExitHook = _interopRequireDefault(require("async-exit-hook"));

var _runner = _interopRequireDefault(require("@wdio/runner"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _constants = require("./constants");

var _context;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('wdio-local-runner');
const runner = new _runner.default();
runner.on('exit', (_context = process).exit.bind(_context));
runner.on('error', ({
  name,
  message,
  stack
}) => process.send({
  origin: 'worker',
  name: 'error',
  content: {
    name,
    message,
    stack
  }
}));
process.on('message', m => {
  if (!m || !m.command) {
    return log.info('Ignore message for worker:', m);
  }

  log.info(`Run worker command: ${m.command}`);
  runner[m.command](m).then(result => process.send({
    origin: 'worker',
    name: 'finisedCommand',
    content: {
      command: m.command,
      result
    }
  }), e => {
    log.error(`Failed launching test session: ${e.stack}`);
    process.exit(1);
  });
});
/**
 * catch sigint messages as they are handled by main process
 */

(0, _asyncExitHook.default)(callback => {
  if (!callback) {
    return;
  }

  runner.sigintWasCalled = true;
  log.info(`Received SIGINT, giving process ${_constants.SHUTDOWN_TIMEOUT}ms to shutdown gracefully`);
  setTimeout(callback, _constants.SHUTDOWN_TIMEOUT);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ydW4uanMiXSwibmFtZXMiOlsibG9nIiwicnVubmVyIiwiUnVubmVyIiwib24iLCJwcm9jZXNzIiwiZXhpdCIsIm5hbWUiLCJtZXNzYWdlIiwic3RhY2siLCJzZW5kIiwib3JpZ2luIiwiY29udGVudCIsIm0iLCJjb21tYW5kIiwiaW5mbyIsInRoZW4iLCJyZXN1bHQiLCJlIiwiZXJyb3IiLCJjYWxsYmFjayIsInNpZ2ludFdhc0NhbGxlZCIsIlNIVVRET1dOX1RJTUVPVVQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7OztBQUVBLE1BQU1BLEdBQUcsR0FBRyxxQkFBTyxtQkFBUCxDQUFaO0FBRUEsTUFBTUMsTUFBTSxHQUFHLElBQUlDLGVBQUosRUFBZjtBQUNBRCxNQUFNLENBQUNFLEVBQVAsQ0FBVSxNQUFWLEVBQW9CLFlBQUFDLE9BQU8sRUFBQ0MsSUFBNUI7QUFDQUosTUFBTSxDQUFDRSxFQUFQLENBQVUsT0FBVixFQUFtQixDQUFDO0FBQUVHLEVBQUFBLElBQUY7QUFBUUMsRUFBQUEsT0FBUjtBQUFpQkMsRUFBQUE7QUFBakIsQ0FBRCxLQUE4QkosT0FBTyxDQUFDSyxJQUFSLENBQWE7QUFDMURDLEVBQUFBLE1BQU0sRUFBRSxRQURrRDtBQUUxREosRUFBQUEsSUFBSSxFQUFFLE9BRm9EO0FBRzFESyxFQUFBQSxPQUFPLEVBQUU7QUFBRUwsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQSxPQUFSO0FBQWlCQyxJQUFBQTtBQUFqQjtBQUhpRCxDQUFiLENBQWpEO0FBTUFKLE9BQU8sQ0FBQ0QsRUFBUixDQUFXLFNBQVgsRUFBdUJTLENBQUQsSUFBTztBQUN6QixNQUFJLENBQUNBLENBQUQsSUFBTSxDQUFDQSxDQUFDLENBQUNDLE9BQWIsRUFBc0I7QUFDbEIsV0FBT2IsR0FBRyxDQUFDYyxJQUFKLENBQVMsNEJBQVQsRUFBdUNGLENBQXZDLENBQVA7QUFDSDs7QUFFRFosRUFBQUEsR0FBRyxDQUFDYyxJQUFKLENBQVUsdUJBQXNCRixDQUFDLENBQUNDLE9BQVEsRUFBMUM7QUFDQVosRUFBQUEsTUFBTSxDQUFDVyxDQUFDLENBQUNDLE9BQUgsQ0FBTixDQUFrQkQsQ0FBbEIsRUFBcUJHLElBQXJCLENBQ0tDLE1BQUQsSUFBWVosT0FBTyxDQUFDSyxJQUFSLENBQWE7QUFDckJDLElBQUFBLE1BQU0sRUFBRSxRQURhO0FBRXJCSixJQUFBQSxJQUFJLEVBQUUsZ0JBRmU7QUFHckJLLElBQUFBLE9BQU8sRUFBRTtBQUNMRSxNQUFBQSxPQUFPLEVBQUVELENBQUMsQ0FBQ0MsT0FETjtBQUVMRyxNQUFBQTtBQUZLO0FBSFksR0FBYixDQURoQixFQVNLQyxDQUFELElBQU87QUFDSGpCLElBQUFBLEdBQUcsQ0FBQ2tCLEtBQUosQ0FBVyxrQ0FBaUNELENBQUMsQ0FBQ1QsS0FBTSxFQUFwRDtBQUNBSixJQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiO0FBQ0gsR0FaTDtBQWNILENBcEJEO0FBc0JBOzs7O0FBR0EsNEJBQVVjLFFBQUQsSUFBYztBQUNuQixNQUFJLENBQUNBLFFBQUwsRUFBZTtBQUNYO0FBQ0g7O0FBRURsQixFQUFBQSxNQUFNLENBQUNtQixlQUFQLEdBQXlCLElBQXpCO0FBQ0FwQixFQUFBQSxHQUFHLENBQUNjLElBQUosQ0FBVSxtQ0FBa0NPLDJCQUFpQiwyQkFBN0Q7QUFDQUMsRUFBQUEsVUFBVSxDQUFDSCxRQUFELEVBQVdFLDJCQUFYLENBQVY7QUFDSCxDQVJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4aXRIb29rIGZyb20gJ2FzeW5jLWV4aXQtaG9vaydcblxuaW1wb3J0IFJ1bm5lciBmcm9tICdAd2Rpby9ydW5uZXInXG5pbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcblxuaW1wb3J0IHsgU0hVVERPV05fVElNRU9VVCB9IGZyb20gJy4vY29uc3RhbnRzJ1xuXG5jb25zdCBsb2cgPSBsb2dnZXIoJ3dkaW8tbG9jYWwtcnVubmVyJylcblxuY29uc3QgcnVubmVyID0gbmV3IFJ1bm5lcigpXG5ydW5uZXIub24oJ2V4aXQnLCA6OnByb2Nlc3MuZXhpdClcbnJ1bm5lci5vbignZXJyb3InLCAoeyBuYW1lLCBtZXNzYWdlLCBzdGFjayB9KSA9PiBwcm9jZXNzLnNlbmQoe1xuICAgIG9yaWdpbjogJ3dvcmtlcicsXG4gICAgbmFtZTogJ2Vycm9yJyxcbiAgICBjb250ZW50OiB7IG5hbWUsIG1lc3NhZ2UsIHN0YWNrIH1cbn0pKVxuXG5wcm9jZXNzLm9uKCdtZXNzYWdlJywgKG0pID0+IHtcbiAgICBpZiAoIW0gfHwgIW0uY29tbWFuZCkge1xuICAgICAgICByZXR1cm4gbG9nLmluZm8oJ0lnbm9yZSBtZXNzYWdlIGZvciB3b3JrZXI6JywgbSlcbiAgICB9XG5cbiAgICBsb2cuaW5mbyhgUnVuIHdvcmtlciBjb21tYW5kOiAke20uY29tbWFuZH1gKVxuICAgIHJ1bm5lclttLmNvbW1hbmRdKG0pLnRoZW4oXG4gICAgICAgIChyZXN1bHQpID0+IHByb2Nlc3Muc2VuZCh7XG4gICAgICAgICAgICBvcmlnaW46ICd3b3JrZXInLFxuICAgICAgICAgICAgbmFtZTogJ2ZpbmlzZWRDb21tYW5kJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBtLmNvbW1hbmQsXG4gICAgICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICAoZSkgPT4ge1xuICAgICAgICAgICAgbG9nLmVycm9yKGBGYWlsZWQgbGF1bmNoaW5nIHRlc3Qgc2Vzc2lvbjogJHtlLnN0YWNrfWApXG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSlcbiAgICAgICAgfVxuICAgIClcbn0pXG5cbi8qKlxuICogY2F0Y2ggc2lnaW50IG1lc3NhZ2VzIGFzIHRoZXkgYXJlIGhhbmRsZWQgYnkgbWFpbiBwcm9jZXNzXG4gKi9cbmV4aXRIb29rKChjYWxsYmFjaykgPT4ge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgcnVubmVyLnNpZ2ludFdhc0NhbGxlZCA9IHRydWVcbiAgICBsb2cuaW5mbyhgUmVjZWl2ZWQgU0lHSU5ULCBnaXZpbmcgcHJvY2VzcyAke1NIVVRET1dOX1RJTUVPVVR9bXMgdG8gc2h1dGRvd24gZ3JhY2VmdWxseWApXG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgU0hVVERPV05fVElNRU9VVClcbn0pXG4iXX0=