"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multiremoteHandler = exports.elementErrorHandler = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _refetchElement = _interopRequireDefault(require("./utils/refetchElement"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('webdriverio');
/**
 * This method is an command wrapper for elements that checks if a command is called
 * that wasn't found on the page and automatically waits for it
 *
 * @param  {Function} fn  commandWrap from wdio-sync package (or shim if not running in sync)
 */

const elementErrorHandler = fn => (commandName, commandFn) => {
  return function (...args) {
    /**
     * wait on element if:
     *  - elementId couldn't be fetched in the first place
     *  - command is not explicit wait command for existance or displayedness
     */
    if (!this.elementId && !commandName.match(/(wait(Until|ForDisplayed|ForExist|ForEnabled)|isExisting)/)) {
      log.debug(`command ${commandName} was called on an element ("${this.selector}") ` + 'that wasn\'t found, waiting for it...');
      return fn(commandName, () => {
        /**
         * create new promise so we can apply a custom error message in cases waitForExist fails
         */
        return new Promise((resolve, reject) => this.waitForExist().then(resolve, reject)).then(
        /**
         * if waitForExist was successful requery element and assign elementId to the scope
         */
        () => {
          return this.parent.$(this.selector).then(elem => {
            this.elementId = elem.elementId;
            return fn(commandName, commandFn).apply(this, args);
          });
        },
        /**
         * if waitForExist failes throw custom error
         */
        () => {
          throw new Error(`Can't call ${commandName} on element with selector "${this.selector}" because element wasn't found`);
        });
      }).apply(this);
    }

    try {
      return fn(commandName, commandFn).apply(this, args);
    } catch (error) {
      /**
       * refetch element ids when stale element reference execption was thrown
       */
      if (error.message.includes('stale element reference')) {
        return (0, _refetchElement.default)(this).then(element => {
          this.elementId = element.elementId;
          this.parent = element.parent;
          return fn(commandName, commandFn).apply(this, args);
        });
      }
      /**
       * add other post command handlings here
       */


      throw error;
    }
  };
};
/**
 * handle single command calls from multiremote instances
 */


exports.elementErrorHandler = elementErrorHandler;

const multiremoteHandler = wrapCommand => commandName => {
  return wrapCommand(commandName, function (...args) {
    const commandResults = this.instances.map(instanceName => {
      return this[instanceName][commandName](...args);
    });
    return Promise.all(commandResults);
  });
};

exports.multiremoteHandler = multiremoteHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9taWRkbGV3YXJlcy5qcyJdLCJuYW1lcyI6WyJsb2ciLCJlbGVtZW50RXJyb3JIYW5kbGVyIiwiZm4iLCJjb21tYW5kTmFtZSIsImNvbW1hbmRGbiIsImFyZ3MiLCJlbGVtZW50SWQiLCJtYXRjaCIsImRlYnVnIiwic2VsZWN0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIndhaXRGb3JFeGlzdCIsInRoZW4iLCJwYXJlbnQiLCIkIiwiZWxlbSIsImFwcGx5IiwiRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsImVsZW1lbnQiLCJtdWx0aXJlbW90ZUhhbmRsZXIiLCJ3cmFwQ29tbWFuZCIsImNvbW1hbmRSZXN1bHRzIiwiaW5zdGFuY2VzIiwibWFwIiwiaW5zdGFuY2VOYW1lIiwiYWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUVBLE1BQU1BLEdBQUcsR0FBRyxxQkFBTyxhQUFQLENBQVo7QUFFQTs7Ozs7OztBQU1PLE1BQU1DLG1CQUFtQixHQUFJQyxFQUFELElBQVEsQ0FBQ0MsV0FBRCxFQUFjQyxTQUFkLEtBQTRCO0FBQ25FLFNBQU8sVUFBVSxHQUFHQyxJQUFiLEVBQW1CO0FBQ3RCOzs7OztBQUtBLFFBQUksQ0FBQyxLQUFLQyxTQUFOLElBQW1CLENBQUNILFdBQVcsQ0FBQ0ksS0FBWixDQUFrQiwyREFBbEIsQ0FBeEIsRUFBd0c7QUFDcEdQLE1BQUFBLEdBQUcsQ0FBQ1EsS0FBSixDQUNLLFdBQVVMLFdBQVksK0JBQThCLEtBQUtNLFFBQVMsS0FBbkUsR0FDQSx1Q0FGSjtBQUtBLGFBQU9QLEVBQUUsQ0FBQ0MsV0FBRCxFQUFjLE1BQU07QUFDekI7OztBQUdBLGVBQU8sSUFBSU8sT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQixLQUFLQyxZQUFMLEdBQW9CQyxJQUFwQixDQUF5QkgsT0FBekIsRUFBa0NDLE1BQWxDLENBQWpDLEVBQTRFRSxJQUE1RTtBQUNIOzs7QUFHQSxjQUFNO0FBQ0YsaUJBQU8sS0FBS0MsTUFBTCxDQUFZQyxDQUFaLENBQWMsS0FBS1AsUUFBbkIsRUFBNkJLLElBQTdCLENBQW1DRyxJQUFELElBQVU7QUFDL0MsaUJBQUtYLFNBQUwsR0FBaUJXLElBQUksQ0FBQ1gsU0FBdEI7QUFDQSxtQkFBT0osRUFBRSxDQUFDQyxXQUFELEVBQWNDLFNBQWQsQ0FBRixDQUEyQmMsS0FBM0IsQ0FBaUMsSUFBakMsRUFBdUNiLElBQXZDLENBQVA7QUFDSCxXQUhNLENBQVA7QUFJSCxTQVRFO0FBVUg7OztBQUdBLGNBQU07QUFDRixnQkFBTSxJQUFJYyxLQUFKLENBQVcsY0FBYWhCLFdBQVksOEJBQTZCLEtBQUtNLFFBQVMsZ0NBQS9FLENBQU47QUFDSCxTQWZFLENBQVA7QUFpQkgsT0FyQlEsQ0FBRixDQXFCSlMsS0FyQkksQ0FxQkUsSUFyQkYsQ0FBUDtBQXNCSDs7QUFFRCxRQUFJO0FBQ0EsYUFBT2hCLEVBQUUsQ0FBQ0MsV0FBRCxFQUFjQyxTQUFkLENBQUYsQ0FBMkJjLEtBQTNCLENBQWlDLElBQWpDLEVBQXVDYixJQUF2QyxDQUFQO0FBQ0gsS0FGRCxDQUVFLE9BQU9lLEtBQVAsRUFBYztBQUNaOzs7QUFHQSxVQUFJQSxLQUFLLENBQUNDLE9BQU4sQ0FBY0MsUUFBZCxDQUF1Qix5QkFBdkIsQ0FBSixFQUF1RDtBQUNuRCxlQUFPLDZCQUFlLElBQWYsRUFBcUJSLElBQXJCLENBQTJCUyxPQUFELElBQWE7QUFDMUMsZUFBS2pCLFNBQUwsR0FBaUJpQixPQUFPLENBQUNqQixTQUF6QjtBQUNBLGVBQUtTLE1BQUwsR0FBY1EsT0FBTyxDQUFDUixNQUF0QjtBQUVBLGlCQUFPYixFQUFFLENBQUNDLFdBQUQsRUFBY0MsU0FBZCxDQUFGLENBQTJCYyxLQUEzQixDQUFpQyxJQUFqQyxFQUF1Q2IsSUFBdkMsQ0FBUDtBQUNILFNBTE0sQ0FBUDtBQU1IO0FBRUQ7Ozs7O0FBSUEsWUFBTWUsS0FBTjtBQUNIO0FBQ0osR0F6REQ7QUEwREgsQ0EzRE07QUE2RFA7Ozs7Ozs7QUFHTyxNQUFNSSxrQkFBa0IsR0FBSUMsV0FBRCxJQUFrQnRCLFdBQUQsSUFBaUI7QUFDaEUsU0FBT3NCLFdBQVcsQ0FBQ3RCLFdBQUQsRUFBYyxVQUFVLEdBQUdFLElBQWIsRUFBbUI7QUFDL0MsVUFBTXFCLGNBQWMsR0FBRyxLQUFLQyxTQUFMLENBQWVDLEdBQWYsQ0FBb0JDLFlBQUQsSUFBa0I7QUFDeEQsYUFBTyxLQUFLQSxZQUFMLEVBQW1CMUIsV0FBbkIsRUFBZ0MsR0FBR0UsSUFBbkMsQ0FBUDtBQUNILEtBRnNCLENBQXZCO0FBSUEsV0FBT0ssT0FBTyxDQUFDb0IsR0FBUixDQUFZSixjQUFaLENBQVA7QUFDSCxHQU5pQixDQUFsQjtBQU9ILENBUk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJ0B3ZGlvL2xvZ2dlcidcblxuaW1wb3J0IHJlZmV0Y2hFbGVtZW50IGZyb20gJy4vdXRpbHMvcmVmZXRjaEVsZW1lbnQnXG5cbmNvbnN0IGxvZyA9IGxvZ2dlcignd2ViZHJpdmVyaW8nKVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGFuIGNvbW1hbmQgd3JhcHBlciBmb3IgZWxlbWVudHMgdGhhdCBjaGVja3MgaWYgYSBjb21tYW5kIGlzIGNhbGxlZFxuICogdGhhdCB3YXNuJ3QgZm91bmQgb24gdGhlIHBhZ2UgYW5kIGF1dG9tYXRpY2FsbHkgd2FpdHMgZm9yIGl0XG4gKlxuICogQHBhcmFtICB7RnVuY3Rpb259IGZuICBjb21tYW5kV3JhcCBmcm9tIHdkaW8tc3luYyBwYWNrYWdlIChvciBzaGltIGlmIG5vdCBydW5uaW5nIGluIHN5bmMpXG4gKi9cbmV4cG9ydCBjb25zdCBlbGVtZW50RXJyb3JIYW5kbGVyID0gKGZuKSA9PiAoY29tbWFuZE5hbWUsIGNvbW1hbmRGbikgPT4ge1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvKipcbiAgICAgICAgICogd2FpdCBvbiBlbGVtZW50IGlmOlxuICAgICAgICAgKiAgLSBlbGVtZW50SWQgY291bGRuJ3QgYmUgZmV0Y2hlZCBpbiB0aGUgZmlyc3QgcGxhY2VcbiAgICAgICAgICogIC0gY29tbWFuZCBpcyBub3QgZXhwbGljaXQgd2FpdCBjb21tYW5kIGZvciBleGlzdGFuY2Ugb3IgZGlzcGxheWVkbmVzc1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCF0aGlzLmVsZW1lbnRJZCAmJiAhY29tbWFuZE5hbWUubWF0Y2goLyh3YWl0KFVudGlsfEZvckRpc3BsYXllZHxGb3JFeGlzdHxGb3JFbmFibGVkKXxpc0V4aXN0aW5nKS8pKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoXG4gICAgICAgICAgICAgICAgYGNvbW1hbmQgJHtjb21tYW5kTmFtZX0gd2FzIGNhbGxlZCBvbiBhbiBlbGVtZW50IChcIiR7dGhpcy5zZWxlY3Rvcn1cIikgYCArXG4gICAgICAgICAgICAgICAgJ3RoYXQgd2FzblxcJ3QgZm91bmQsIHdhaXRpbmcgZm9yIGl0Li4uJ1xuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICByZXR1cm4gZm4oY29tbWFuZE5hbWUsICgpID0+IHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBjcmVhdGUgbmV3IHByb21pc2Ugc28gd2UgY2FuIGFwcGx5IGEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgaW4gY2FzZXMgd2FpdEZvckV4aXN0IGZhaWxzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHRoaXMud2FpdEZvckV4aXN0KCkudGhlbihyZXNvbHZlLCByZWplY3QpKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogaWYgd2FpdEZvckV4aXN0IHdhcyBzdWNjZXNzZnVsIHJlcXVlcnkgZWxlbWVudCBhbmQgYXNzaWduIGVsZW1lbnRJZCB0byB0aGUgc2NvcGVcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC4kKHRoaXMuc2VsZWN0b3IpLnRoZW4oKGVsZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJZCA9IGVsZW0uZWxlbWVudElkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuKGNvbW1hbmROYW1lLCBjb21tYW5kRm4pLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogaWYgd2FpdEZvckV4aXN0IGZhaWxlcyB0aHJvdyBjdXN0b20gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgY2FsbCAke2NvbW1hbmROYW1lfSBvbiBlbGVtZW50IHdpdGggc2VsZWN0b3IgXCIke3RoaXMuc2VsZWN0b3J9XCIgYmVjYXVzZSBlbGVtZW50IHdhc24ndCBmb3VuZGApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KS5hcHBseSh0aGlzKVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbihjb21tYW5kTmFtZSwgY29tbWFuZEZuKS5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiByZWZldGNoIGVsZW1lbnQgaWRzIHdoZW4gc3RhbGUgZWxlbWVudCByZWZlcmVuY2UgZXhlY3B0aW9uIHdhcyB0aHJvd25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3N0YWxlIGVsZW1lbnQgcmVmZXJlbmNlJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVmZXRjaEVsZW1lbnQodGhpcykudGhlbigoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJZCA9IGVsZW1lbnQuZWxlbWVudElkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50ID0gZWxlbWVudC5wYXJlbnRcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm4oY29tbWFuZE5hbWUsIGNvbW1hbmRGbikuYXBwbHkodGhpcywgYXJncylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGFkZCBvdGhlciBwb3N0IGNvbW1hbmQgaGFuZGxpbmdzIGhlcmVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIGhhbmRsZSBzaW5nbGUgY29tbWFuZCBjYWxscyBmcm9tIG11bHRpcmVtb3RlIGluc3RhbmNlc1xuICovXG5leHBvcnQgY29uc3QgbXVsdGlyZW1vdGVIYW5kbGVyID0gKHdyYXBDb21tYW5kKSA9PiAoY29tbWFuZE5hbWUpID0+IHtcbiAgICByZXR1cm4gd3JhcENvbW1hbmQoY29tbWFuZE5hbWUsIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmRSZXN1bHRzID0gdGhpcy5pbnN0YW5jZXMubWFwKChpbnN0YW5jZU5hbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW2luc3RhbmNlTmFtZV1bY29tbWFuZE5hbWVdKC4uLmFyZ3MpXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGNvbW1hbmRSZXN1bHRzKVxuICAgIH0pXG59XG4iXX0=